generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Settings {
  id Int @id @default(autoincrement())

  headerLogo     String
  headerDarkLogo String

  footerLogo     String
  footerDarkLogo String
  description    String

  twitter   String
  linkedIn  String
  facebook  String
  instagram String
  telegram  String

  siteName String

  homeTitle    String
  homeSubTitle String

  contactTitle    String
  contactSubTitle String
  email           String
  phone           String
}

model Blog {
  id               String   @id @default(cuid())
  title            String
  slug             String
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  category         Category @relation(fields: [categoryId], references: [id])
  categoryId       Int
  thumbnail        String
  shortDescription String
  featuredImage    String?
  content          String
  views            Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Category {
  id    Int    @id @default(autoincrement())
  title String
  slug  String
  blogs Blog[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  type        UserType @default(USER)
  description String?
  twitter     String?
  linkedIn    String?
  facebook    String?
  instagram   String?
  telegram    String?
  blogs       Blog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum UserType {
  ADMIN
  AUTHOR
  USER
}
